[{"content":"为什么使用Hugo 性能好\nHugo：Hugo是采用 Go 语言编写的静态网站生成器，编译速度极快。在处理大量页面时，优势明显。比如构建拥有数千篇文章的大型博客，Hugo 可能在几秒内完成，不会因网站规模扩大而显著增加构建时间\nHexo：基于 Node.js的静态网页生成器，构建速度相对较慢。处理大型项目时，构建时间会明显变长。不过，对于小型网站，构建速度的影响不大\n弊端\n静态网站的通病：没有后端。所有搜索、评论、在线写文章都需要通过插件（或主题）配置 参考 视频\n【大学生提高课】3 hexo与hugo博客搭建与github自动化推送和服务器推送_哔哩哔哩_bilibili 文档\n手把手学习 Hugo 博客的搭建:从入门到进阶 其他\n个人选择主题的作者的博客 第一部分：环境搭建 快速入门 | Hugo官方文档\n根据官方文档的「快速入门」，安装hugo（我直接下载预编译的二进制文件，具体方法参考官方文档或者【大学生提高课】3 hexo与hugo博客搭建与github自动化推送和服务器推送_哔哩哔哩_bilibili的10:22-11:40）\n第二部分：创建Hugo站点 创建Hugo新站点 1 hugo new site my-blog 其中 my-blog 是站点目录名称，可修改\n第三部分：配置主题 选择主题 官方主题仓库 hugo-theme · GitHub Topics（第三方主题仓库）\n选择喜欢的主题，按照对应的文档进行操作（【大学生提高课】3 hexo与hugo博客搭建与github自动化推送和服务器推送_哔哩哔哩_bilibili13:10-18:30，视频使用的是官方主题的「stack」）\n我个人使用主题是：hugo-theme-cybe别人基于「stack」修改的主题，按照文档进行配置。可能遇到的问题：\n1.删掉默认的配置文件config.toml，以前创建的站点目录中的文件叫做config.toml，现在叫做hugo.toml，删除它\n2.获取主题文件，如果不能用git命令，直接下载源文件，把文件名删去最后的main，直接拖入themes中\n3.不知道为什么，我直接用hugo-theme-cybe搜索功能用不了，所以我是先放入了原本的「hugo-theme-stack」主题，然后放入「hugo-theme-cybe」把一些内容覆盖，之后再修改，就能正常使用搜索了\n根目录下layouts和themes/\u0026lt;theme name\u0026gt;/layouts/的区别\nlayouts/目录里保存是 Hugo 的模板文件。layouts/是站点级别的模板\nthemes/\u0026lt;theme name\u0026gt;/layouts/是主题级别的模板，一般来说，站点级别模板的设置优先于主题级别的模板（可修改优先级）\n应用主题 1.按照文档下载主题\n如果使用git命令，自动生成在站点目录的themes中 如果手动下载源文件，需要手动拖入themes中 2.配置主题名称\n下载完成后在 hugo.yaml 文件中配置主题名称（这个hugo-theme-cybe是我使用的主题）：\n1 theme: hugo-theme-cybe 第四部分：内容创建与管理 了解Hugo目录结构 目录可能不一样，但文件夹作用是一致的\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 my-blog/ ├── content # 存放所有内容文件 │ ├── _index.md # 博客首页内容 │ ├── post # 博客文章 │ │ ├── first-post.md │ │ └── second-post.md │ └── pages # 博客页面 │ └── about.md # 关于页面 ├── data # 存放站点数据 │ ├── authors.yml # 作者信息 │ └── config.toml # 站点配置文件 ├── i18n # 国际化语言文件 │ ├── en.toml # 英文语言文件 │ └── zh.toml # 中文语言文件 ├── layouts # 存放页面模板 │ ├── _default # 默认模板 │ ├── partials # 模板片段 │ └── index.html # 首页模板 ├── assets # 存放编译前的资源文件 │ ├── css # 存放 CSS 源文件 │ ├── js # 存放 JavaScript 源文件 │ └── images # 存放图片源文件 ├── resources # 存放生成的资源文件 │ └── _gen # 生成的资源文件 ├── static # 存放静态资源（如图片、CSS、JS） │ ├── css # 存放编译后的 CSS 文件 │ ├── js # 存放编译后的 JavaScript 文件 │ └── images # 存放图片文件 ├── public # 生成的网站文件 ├── themes # 存放主题文件 │ └── my-theme # 自定义主题文件 │ ├── layouts # 存放页面模板 │ ├── static # 存放主题静态资源 │ └── theme.toml # 主题配置文件 ├── archetypes # 内容模板文件 │ ├── default.md # 默认内容模板 │ └── post.md # 博客文章模板 └── hugo_build.lock # Hugo 包管理文件 添加内容 在content/post目录中创建my-first-post.md（文件名，可更改）文件：\n1 hugo new content/post/my-first-post.md hugo new 什么，这是固定的。在我的目录中，content文件夹是存放所有内容的文件夹，post是存放博客文章的文件夹。然后想要在post文件夹下直接创建文章，所以这么输入命令\n可以多添加几个文件夹（可中文/英文），或者修改md文档的名称（可中文/英文），比如：hugo new content/post/2025/样例.md\n不过博客还有image，文章预览图。想要使用image，文章必须命名成index.md。我个人的习惯是：hugo new content/post/文章的标题当作文件夹名/index.md\nindex.md不影响文章的标题名\nFront-matter 官网\nFront-matter 是 markdown 文件最上方以---分隔的区域，用于指定个别档案的变数。---下方使用markdown语法添加内容\n基本：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 --- title: 这是标题 description: 这是一个副标题 date: 2020-09-09 darft: true slug: test-chinese image: helena-hertz-wWZzXlDpMog-unsplash.jpg categories: - Test - 测试 tags: - 中文 toc: true --- draft 是操作，值为 true。Hugo 在构建网站时不会发布草稿内容。如果删除，默认发布，类似draft是false\nslug用来生成网页URL的路径部分。如果没有，网页路径的名字就是标题名\nimage是文章预览图。注意：想要使用image，文章必须命名成index.md（可以是像index-zh-cn这样带语言的，但必须是index），同时文章和图片在同一个文件夹\ncategories是分类。可以用数组的写法，如：categories: [\u0026lsquo;分类1\u0026rsquo;，‘分类2\u0026rsquo;]\ntags是标签。可以用数组的写法\ntoc是页面内容表，即标题\n第五部分：本地预览与配置 博客本地预览 在对内容和主题进行修改后，您可以使用以下命令进行本地预览：\n1 hugo serve 这将在你的浏览器中打开一个本地服务器，访问http://localhost:1313来查看博客页面（本地预览默认是不渲染草稿）\n第六部分：GitHub推送自动化和博客托管优化指南 可以使用GitHub Pages，将Hugo博客部署到互联网上，它是GitHub提供的免费静态网站托管服务\n如果使用，GitHub Page，需要在GitHub上创建一个新的仓库，仓库名称遵循your-github-username.github.io的格式（your-github-username是你的github用户名）。这将是你博客的主域名\n我使用Netlify托管\n在使用Github Pages构建并托管博客时，我们面临一个常见问题：如何在保持源码安全的同时，将构建好的public文件用于页面展示。\n可以通过创建两个GitHub仓库来实现不同用途的分离和自动化管理\nGitHub推送自动化 源码仓库（source） 用于存储博客相关的源码，包括Markdown文件、配置信息等未构建的内容 设为Private（私有）仓库，确保源码安全 展示仓库（show） 用于存储构建后的文件（如public文件夹），供Github Pages或其他托管服务使用 设为Public（公开）仓库，确保可以正常访问页面 步骤：\n【大学生提高课】3 hexo与hugo博客搭建与github自动化推送和服务器推送_哔哩哔哩_bilibili20:47-35:05的视频\n通过自动化工作流，把源码推送到私人仓库后，自动触发，推送到公开仓库\n发布文章 这里已经按照视频里的步骤配置好了，发布文章的代码也是最基本的三个，用终端打开博客所在的文件夹，然后依次输入：\n1 2 3 git add . git commit -m \u0026#34;备注信息\u0026#34; git push -u origin main 使用Netlify托管 Netlify官网\n虽然GitHub Pages可以直接托管展示仓库的内容，但其二级域名（username.github.io）不够美观，也不满足个性化需求\n可以使用Netlify这样的免费静态网页托管平台\n为什么选择Netlify？ 1.自定义域名支持\nNetlify允许用户免费绑定自定义域名（免费绑定，但域名要去阿里云等付费买）\n2.免费托管服务\n提供免费、高效的静态网站托管服务，支持全球CDN\n3.自动化部署\nNetlify可与GitHub仓库继承，自动从展示仓库拉取最新的构建内容并部署\n4.HTTPS支持\nNetlify提供免费的HTTPS证书，默认启用HTTPS，提升网站安全性\n第七部分：Typora+PicGo图床配置 【大学生提高课】3 hexo与hugo博客搭建与github自动化推送和服务器推送_哔哩哔哩_bilibili34:29-44:55的视频\n第八部分：自定义域名 在阿里云或者腾讯云等购买一个域名。在GitHub仓库的Settings-\u0026gt;Pages中配置自定义域名\n第九部分：其余更改 hugo.yaml hugo.yaml中：\n1 2 3 4 5 baseurl: https://example.com/ languageCode: zh-cn theme: hugo-theme-cybe title: Example Site copyright: Example Person baseurl修改成你的网站域名，在主页，点击文章，会根据你的域名跳转文章的内容\ntitle是网站的名字\ncopyright是版权\nhugo.yaml中其余文字和emoji内容，按情况修改\ncategories文件夹 categories存放分类，自己定义，文档名称是_index.md（我也不知道为什么加_）\n头像、网站页签，代码块顶部图标 头像我放在了themes/hugo-theme-cybe/assets/img里\n网站页签和代码块顶部，我直接从kmeykranz/blog-file: Hugo博客源文件作者源文件里，把static整个文件复制过来\n把自己的图片变成页签，需要把图片转成ico格式，可以看【教程】jpg转ico,将桌面软件图标更换为任意自己喜欢的图片！_哔哩哔哩_bilibili)\n","date":"2025-04-18T00:09:31+08:00","permalink":"https://zhiwu215.netlify.app/p/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/","title":"从零开始用hugo搭建博客"},{"content":"反思-面向题解编程 2025/4/12 这一天，蓝桥杯结束\n我也深刻的明白了自己的不足，平日里没有思考，只是看一眼，然后就直接看题解，这样的方式对我没有任何的锻炼\n考场上的题目，对我而言，就好像是一道道脑筋急转弯+数学题，完全没有思路\n学习方法 过去我的学习方法出了问题，我直接开始做题目，妄图从题目中学习算法，但实际上，如果没有最基础的算法了解，根本不能从题目里学到东西\n学习的步骤：\n1.数据结构\n对于数据结构，我最先看的是浙江大学数据结构 陈越，却觉得不够清楚，于是我就换了老师\n然后又找了B站上的数据结构与算法基础（青岛大学-王卓） 这个老师的视频，在我看来，就清楚多了(第一章全是概念，会云里雾里，但是没有关系，熬过去后面就好了)\n对于蓝桥杯，数据结构其实没有必要那么正统的学完，了解最基本的表，栈，堆，树，图等是如何存储的就行了，这个数据结构的课其实没有必要全部完完整整地看完\n不过实际上，我们大一上虽然没有数据结构，但是学了离散数学，大一上报名的蓝桥杯，大一下的四月比赛，有一整个学期的时间，只要学了离散数学，也会对一些数据结构有基本的了解 (教材的离散数学真不是人看的，很难懂，最好还是跳着看王卓老师的数据结构课，了解最基本的存储结构)\n第一步：数据结构，完全没有必要浪费太多的时间看得面面俱到，一定要很快地跳着看，后面忘记了，再回来复习\n2.算法\n（以下up的书写顺序，就是观看顺序） 我最开始只会c，不会c++，所以我看了-超级小暴龙- 的C/C++（基础讲解+算法辅导）系列，了解了最基本的c++和容器的使用\n（这个up会讲题，但只需要明白如果使用c++和了解容器就足够了，不会完全按照这个up的写法写题，因为你还不懂算法，而且其实也不用每道题都用容器）\n对于算法，在学习的别人的过程中，首先要找一个人模仿，然后有自己的写法，到了最后看别人的题解也要改成自己的写法的地步\n无论是变量名，还是初始化的位置等等，如果看不同的老师，可能每一道题都有不同的写法，这样对自己根本没有任何的帮助\n这里我推荐B站的up溶金落梧桐，他的蓝桥杯三十天冲刺系列，能带你清晰的了解很多考试会考的算法\n而且也写代码的方式也可以完全参照他\n对于字符串、结构体、stl等可以看小水獭鸽鸽的蓝桥杯一个月冲刺省一（专项复习）\u0026ndash;备赛技巧系列\n（这个up在这个系列后面还会讲bfs等算法，有些算法溶金落梧桐讲了，优先以他的为准）\n这三个up里，最重要，一定要看的就是溶金落梧桐\n3.刷题\n刷题，一定要自己什么都不看，独立思考一道题20~30分钟，对于每一道题，都要当成正规考试的题目，不能有任何的查阅资料的行为，没有思考，就没有任何效果\n对于刷题，可以看up主小水獭鸽鸽的蓝桥杯备战（一定要自己先思考半小时做完再看up!!!）\n之后对于各种零散的题目，可以看题目本身的题解，或者在B站上搜别人的解题思路（不同的人，同一个的算法也有不同的写法，一定要按照自己的写法做题）\n接下来 这次的蓝桥杯，我大概率是打铁了\n接下来，我就要准备CCF CSP认证了\n希望这次蓝桥杯，能让我涨涨教训\n2025/5/5 蓝桥杯成绩4/30号，就出来了，但五一光顾着怠惰了，所以没有写博客 拿了一个省二(比赛是真的水) 下次努力进过赛吧 最近喜欢上了贝斯，大抵没有心思准备CCF CSP认证了\n","date":"2025-04-17T22:16:08+08:00","permalink":"https://zhiwu215.netlify.app/p/%E7%AC%AC%E4%B8%80%E6%AC%A1%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9A%84%E5%8F%8D%E6%80%9D%E5%92%8C%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/","title":"第一次蓝桥杯的反思和学习方法"}]